변수명을 변경할때는 Ctrl R R을 하면 한번에 변경이 가능하다.

=====
임계값(threshold)은 어떤 값이 주어진 조건을 만족하는지 또는 넘는지를 판단하는 기준 값입니다. 
템플릿 매칭과 같은 이미지 처리에서 임계값은 주로 매칭 결과의 유의미한 부분을 선택하는 데 사용됩니다.

템플릿 매칭에서는 매칭 결과 행렬의 값들이 상관계수 또는 유사도를 나타내므로, 
임계값을 설정하여 이 값이 어느 정도 이상인 부분을 선택할 수 있습니다. 
예를 들어, 임계값을 0.8로 설정한다면, 매칭 결과 행렬에서 0.8 이상의 값을 가지는 부분들만을 선택하게 됩니다.

임계값은 응용 분야나 특정 작업에 따라 다르게 설정될 수 있습니다. 
높은 임계값을 선택하면 정확도는 높아지지만 검출되는 부분은 적어집니다. 
낮은 임계값을 선택하면 더 많은 부분이 선택되지만, 그만큼 거짓 양성이 증가할 수 있습니다. 
따라서 임계값은 적절한 값을 찾기 위해 실험적으로 조절되기도 합니다.

템플릿 매칭에서는 일반적으로 임계값을 설정하여 얼마나 강하게 매칭을 감지할지를 결정합니다. 
각 문제나 상황에 따라서 최적의 임계값이 다를 수 있습니다.
=====
zeros
- 행렬을 생성하고 모든 원소를 0으로 초기화 하는 함수


cv::threshold 사용법
===============================================================
ChatGPT
cv::threshold 함수는 OpenCV 라이브러리에서 이미지의 픽셀 값을 이진화하는 데 사용됩니다. 
이진화는 이미지를 흑백으로 만들고, 특정 임계값을 기준으로 픽셀을 
두 가지 값 중 하나로 설정하는 프로세스입니다.  이 함수의 기본 형식은 다음과 같습니다:
cpp
Copy code
void cv::threshold(
    InputArray src,       // 입력 이미지 (단일 채널, 8 비트 또는 32 비트 부동 소수점)
    OutputArray dst,      // 결과 이미지
    double thresh,        // 임계값
    double maxval,        // 임계값을 넘는 픽셀에 대한 값
    int thresholdType     // 임계값 적용 방법
);
여기서:

src: 입력 이미지입니다. 이진화를 적용할 이미지이며, 단일 채널이어야 합니다.
dst: 결과 이미지로서, 함수에 의해 생성됩니다.
thresh: 임계값입니다. 이 값보다 큰 픽셀은 maxval로 설정되고, 이 값보다 작은 픽셀은 0으로 설정됩니다.
maxval: 임계값을 넘는 픽셀에 대한 값입니다.
thresholdType: 임계값 적용 방법입니다. 여러 가지 옵션이 있으며, 
주요 옵션으로는 cv::THRESH_BINARY, cv::THRESH_BINARY_INV, cv::THRESH_TRUNC, 
cv::THRESH_TOZERO, cv::THRESH_TOZERO_INV 등이 있습니다.
==================================================================

C++에서 contours란?
--------------------------------------------------------------------------------------------------------------------
C++의 OpenCV 라이브러리에서 contours는 동일한 색 또는 동일한 픽셀 강도를 가진 연속된 점들을 
연결한 선을 의미합니다. 즉, 이미지에서 동일한 색 또는 강도를 가진 경계선을 찾아내는 데 사용되는 개념입니다.

Contours는 이미지에서 객체를 감지하거나 인식하는 데 사용됩니다. 예를 들어, 손 글씨를 
인식하거나 객체 추적 등 다양한 컴퓨터 비전 응용 프로그램에서 사용됩니다.

OpenCV에서 contours를 찾는 대표적인 함수는 findContours 입니다. 이 함수를 사용하면 이미지에서 
contours를 찾아 벡터 형태로 반환해줍니다. 이 때, 각각의 contour는 점들의 리스트로 표현됩니다.

c
std::vector<std::vector<cv::Point>> contours;
cv::findContours(image, contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE);

위의 코드에서 cv::findContours는 이미지에서 contours를 찾는 함수입니다. c
v::RETR_EXTERNAL는 가장 바깥쪽의 contour만 검출하도록 지시하고, 
cv::CHAIN_APPROX_SIMPLE는 contour의 꼭대기 점만을 반환하도록 지시하는 flag입니다.

이렇게 찾아낸 contours는 다양한 용도로 사용될 수 있으며, 특정 객체의 경계를 찾거나, 
객체의 모양을 분석하는 데 사용될 수 있습니다.
--------------------------------------------------------------------------------------------------------------------

허프 원 변환
--------------------------------------------------------------------------------------------------------------------
허프 원 변환(Hough Circle Transform)은 이미지에서 원을 검출하는 기법 중 하나입니다. 
이 알고리즘은 직교 좌표계(허프 공간)에서 특정 원의 중심을 찾아내는 방법입니다. 
OpenCV에서는 cv::HoughCircles 함수를 사용하여 허프 원 변환을 구현할 수 있습니다. 
아래는 허프 원 변환에 대한 간략한 설명입니다.

허프 원 변환의 주요 단계:
1. 그레이 스케일 변환 및 블러 처리:
원을 검출하기 전에 입력 이미지를 그레이 스케일로 변환합니다.
이미지에 노이즈를 줄이기 위해 가우시안 블러(Gaussian Blur)를 적용할 수 있습니다.

2.Canny 엣지 검출:
이미지의 엣지를 감지하기 위해 Canny 엣지 검출을 수행합니다.

3.허프 원 변환 적용:
cv::HoughCircles 함수를 사용하여 허프 원 변환을 적용합니다.
이 함수는 여러 매개변수를 갖추고 있으며, 주로 다음과 같은 매개변수가 사용됩니다:
	입력 이미지
	검출된 원의 결과를 저장할 변수(일반적으로 std::vector<cv::Vec3f> circles와 같이 사용)
	허프 원 변환의 메소드 (일반적으로 cv::HOUGH_GRADIENT를 사용)
	원 중심 간의 최소 거리
	Canny 엣지 검출기의 높은 임계값
	Hough 변환에서 누적자의 임계값
	최소 원 반지름과 최대 원 반지름

4.결과 활용:
검출된 원의 결과를 활용하여 필요한 작업을 수행합니다. 
주로 중심 좌표와 반지름 정보를 활용하여 이미지에 원을 그리거나, 다양한 응용을 할 수 있습니다.
--------------------------------------------------------------------------------------------------------------------